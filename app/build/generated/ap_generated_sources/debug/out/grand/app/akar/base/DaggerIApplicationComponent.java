// Generated by Dagger (https://dagger.dev).
package grand.app.akar.base;

import androidx.lifecycle.MutableLiveData;
import dagger.internal.DoubleCheck;
import grand.app.akar.activity.BaseActivity;
import grand.app.akar.activity.MainActivity;
import grand.app.akar.activity.MainActivity_MembersInjector;
import grand.app.akar.connection.Api;
import grand.app.akar.connection.ConnectionHelper;
import grand.app.akar.connection.ConnectionHelper_Factory;
import grand.app.akar.connection.ConnectionModule;
import grand.app.akar.connection.ConnectionModule_WebServiceFactory;
import grand.app.akar.model.base.Mutable;
import grand.app.akar.pages.adDetails.AdDetailsFragment;
import grand.app.akar.pages.adDetails.AdDetailsFragment_MembersInjector;
import grand.app.akar.pages.adDetails.viewModels.AdDetailsViewModel;
import grand.app.akar.pages.adDetails.viewModels.AdDetailsViewModel_Factory;
import grand.app.akar.pages.adDetails.viewModels.AdDetailsViewModel_MembersInjector;
import grand.app.akar.pages.ads.AdsInfoFragment;
import grand.app.akar.pages.ads.AdsInfoFragment_MembersInjector;
import grand.app.akar.pages.ads.AdvertisingFeeFragment;
import grand.app.akar.pages.ads.AdvertisingFeeFragment_MembersInjector;
import grand.app.akar.pages.ads.AkarLocationsCitiesFragment;
import grand.app.akar.pages.ads.AkarLocationsCitiesFragment_MembersInjector;
import grand.app.akar.pages.ads.AkarLocationsMapFragment;
import grand.app.akar.pages.ads.AkarLocationsMapFragment_MembersInjector;
import grand.app.akar.pages.ads.CategoriesFragment;
import grand.app.akar.pages.ads.CategoriesFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AdUploadingSuccessFragment;
import grand.app.akar.pages.ads.forms.AdUploadingSuccessFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddFactoryFormFragment;
import grand.app.akar.pages.ads.forms.AddFactoryFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddFlatFormFragment;
import grand.app.akar.pages.ads.forms.AddFlatFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddLandFormFragment;
import grand.app.akar.pages.ads.forms.AddLandFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddOfficeFormFragment;
import grand.app.akar.pages.ads.forms.AddOfficeFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddResetFormFragment;
import grand.app.akar.pages.ads.forms.AddResetFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddStoreFormFragment;
import grand.app.akar.pages.ads.forms.AddStoreFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddVillaHouseManagmentFormFragment;
import grand.app.akar.pages.ads.forms.AddVillaHouseManagmentFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AddWareHosueFormFragment;
import grand.app.akar.pages.ads.forms.AddWareHosueFormFragment_MembersInjector;
import grand.app.akar.pages.ads.forms.AdsAttachmentsFragment;
import grand.app.akar.pages.ads.forms.AdsAttachmentsFragment_MembersInjector;
import grand.app.akar.pages.ads.viewModels.AddVillaHouseViewModel;
import grand.app.akar.pages.ads.viewModels.AddVillaHouseViewModel_Factory;
import grand.app.akar.pages.ads.viewModels.AddVillaHouseViewModel_MembersInjector;
import grand.app.akar.pages.ads.viewModels.AdsViewModel;
import grand.app.akar.pages.ads.viewModels.AdsViewModel_Factory;
import grand.app.akar.pages.ads.viewModels.AdsViewModel_MembersInjector;
import grand.app.akar.pages.ads.viewModels.AttachmentsViewModel;
import grand.app.akar.pages.ads.viewModels.AttachmentsViewModel_Factory;
import grand.app.akar.pages.ads.viewModels.AttachmentsViewModel_MembersInjector;
import grand.app.akar.pages.ads.viewModels.CategoriesViewModel;
import grand.app.akar.pages.ads.viewModels.CategoriesViewModel_Factory;
import grand.app.akar.pages.ads.viewModels.CategoriesViewModel_MembersInjector;
import grand.app.akar.pages.auth.changePassword.ChangePasswordFragment;
import grand.app.akar.pages.auth.changePassword.ChangePasswordFragment_MembersInjector;
import grand.app.akar.pages.auth.changePassword.ChangePasswordViewModel;
import grand.app.akar.pages.auth.changePassword.ChangePasswordViewModel_Factory;
import grand.app.akar.pages.auth.changePassword.ChangePasswordViewModel_MembersInjector;
import grand.app.akar.pages.auth.confirmCode.ConfirmCodeFragment;
import grand.app.akar.pages.auth.confirmCode.ConfirmCodeFragment_MembersInjector;
import grand.app.akar.pages.auth.confirmCode.ConfirmViewModel;
import grand.app.akar.pages.auth.confirmCode.ConfirmViewModel_Factory;
import grand.app.akar.pages.auth.confirmCode.ConfirmViewModel_MembersInjector;
import grand.app.akar.pages.auth.forgetPassword.ForgetPasswordFragment;
import grand.app.akar.pages.auth.forgetPassword.ForgetPasswordFragment_MembersInjector;
import grand.app.akar.pages.auth.forgetPassword.ForgetPasswordViewModel;
import grand.app.akar.pages.auth.forgetPassword.ForgetPasswordViewModel_Factory;
import grand.app.akar.pages.auth.forgetPassword.ForgetPasswordViewModel_MembersInjector;
import grand.app.akar.pages.auth.login.LoginFragment;
import grand.app.akar.pages.auth.login.LoginFragment_MembersInjector;
import grand.app.akar.pages.auth.login.LoginViewModel;
import grand.app.akar.pages.auth.login.LoginViewModel_Factory;
import grand.app.akar.pages.auth.login.LoginViewModel_MembersInjector;
import grand.app.akar.pages.auth.payment.PaymentFragment;
import grand.app.akar.pages.auth.payment.PaymentFragment_MembersInjector;
import grand.app.akar.pages.auth.payment.PaymentViewModel;
import grand.app.akar.pages.auth.payment.PaymentViewModel_Factory;
import grand.app.akar.pages.auth.payment.PaymentViewModel_MembersInjector;
import grand.app.akar.pages.auth.register.RegisterFragment;
import grand.app.akar.pages.auth.register.RegisterFragment_MembersInjector;
import grand.app.akar.pages.auth.register.RegisterViewModel;
import grand.app.akar.pages.auth.register.RegisterViewModel_Factory;
import grand.app.akar.pages.auth.register.RegisterViewModel_MembersInjector;
import grand.app.akar.pages.chat.view.ChatFragment;
import grand.app.akar.pages.conversations.ConversationsFragment;
import grand.app.akar.pages.conversations.ConversationsFragment_MembersInjector;
import grand.app.akar.pages.conversations.viewModels.ConversationsViewModel;
import grand.app.akar.pages.conversations.viewModels.ConversationsViewModel_Factory;
import grand.app.akar.pages.conversations.viewModels.ConversationsViewModel_MembersInjector;
import grand.app.akar.pages.favorites.FavoritesContactFragment;
import grand.app.akar.pages.favorites.FavoritesContactFragment_MembersInjector;
import grand.app.akar.pages.favorites.FavoritesFragment;
import grand.app.akar.pages.favorites.FavoritesFragment_MembersInjector;
import grand.app.akar.pages.favorites.MyFavoritesMainFragment;
import grand.app.akar.pages.favorites.MyFavoritesMainFragment_MembersInjector;
import grand.app.akar.pages.favorites.viewModels.MyFavoritesViewModel;
import grand.app.akar.pages.favorites.viewModels.MyFavoritesViewModel_Factory;
import grand.app.akar.pages.favorites.viewModels.MyFavoritesViewModel_MembersInjector;
import grand.app.akar.pages.home.HomeCitiesFragment;
import grand.app.akar.pages.home.HomeCitiesFragment_MembersInjector;
import grand.app.akar.pages.home.HomeFragment;
import grand.app.akar.pages.home.HomeFragment_MembersInjector;
import grand.app.akar.pages.home.viewModels.HomeViewModel;
import grand.app.akar.pages.home.viewModels.HomeViewModel_Factory;
import grand.app.akar.pages.home.viewModels.HomeViewModel_MembersInjector;
import grand.app.akar.pages.myAccount.MyAccountFragment;
import grand.app.akar.pages.myAccount.MyAccountFragment_MembersInjector;
import grand.app.akar.pages.myAccount.viewModels.MyAccountViewModel;
import grand.app.akar.pages.myAccount.viewModels.MyAccountViewModel_Factory;
import grand.app.akar.pages.myAccount.viewModels.MyAccountViewModel_MembersInjector;
import grand.app.akar.pages.myAds.CurrentAdsFragment;
import grand.app.akar.pages.myAds.CurrentAdsFragment_MembersInjector;
import grand.app.akar.pages.myAds.MyAdsMainFragment;
import grand.app.akar.pages.myAds.MyAdsMainFragment_MembersInjector;
import grand.app.akar.pages.myAds.PreviousAdsFragment;
import grand.app.akar.pages.myAds.PreviousAdsFragment_MembersInjector;
import grand.app.akar.pages.myAds.viewModels.MyAdsViewModel;
import grand.app.akar.pages.myAds.viewModels.MyAdsViewModel_Factory;
import grand.app.akar.pages.myAds.viewModels.MyAdsViewModel_MembersInjector;
import grand.app.akar.pages.notifications.NotificationsFragment;
import grand.app.akar.pages.onBoard.OnBoardFragment;
import grand.app.akar.pages.onBoard.OnBoardFragment_MembersInjector;
import grand.app.akar.pages.profile.ProfileFragment;
import grand.app.akar.pages.profile.ProfileFragment_MembersInjector;
import grand.app.akar.pages.profile.ProfileViewModel;
import grand.app.akar.pages.profile.ProfileViewModel_Factory;
import grand.app.akar.pages.profile.ProfileViewModel_MembersInjector;
import grand.app.akar.pages.settings.AboutAppFragment;
import grand.app.akar.pages.settings.AboutAppFragment_MembersInjector;
import grand.app.akar.pages.settings.ContactUsFragment;
import grand.app.akar.pages.settings.ContactUsFragment_MembersInjector;
import grand.app.akar.pages.settings.TermsFragment;
import grand.app.akar.pages.settings.TermsFragment_MembersInjector;
import grand.app.akar.pages.settings.viewModels.SettingsViewModel;
import grand.app.akar.pages.settings.viewModels.SettingsViewModel_Factory;
import grand.app.akar.pages.settings.viewModels.SettingsViewModel_MembersInjector;
import grand.app.akar.pages.splash.SplashFragment;
import grand.app.akar.pages.splash.SplashFragment_MembersInjector;
import grand.app.akar.pages.splash.SplashViewModel;
import grand.app.akar.pages.splash.SplashViewModel_Factory;
import grand.app.akar.pages.splash.SplashViewModel_MembersInjector;
import grand.app.akar.repository.AdsRepository;
import grand.app.akar.repository.AdsRepository_Factory;
import grand.app.akar.repository.AuthRepository;
import grand.app.akar.repository.AuthRepository_Factory;
import grand.app.akar.repository.ChatRepository;
import grand.app.akar.repository.ChatRepository_Factory;
import grand.app.akar.repository.HomeRepository;
import grand.app.akar.repository.HomeRepository_Factory;
import grand.app.akar.repository.SettingsRepository;
import grand.app.akar.repository.SettingsRepository_Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerIApplicationComponent implements IApplicationComponent {
  private Provider<MutableLiveData<Mutable>> getMutableLiveDataProvider;

  private Provider<Api> webServiceProvider;

  private Provider<ConnectionHelper> connectionHelperProvider;

  private Provider<HomeRepository> homeRepositoryProvider;

  private Provider<AuthRepository> authRepositoryProvider;

  private Provider<SettingsRepository> settingsRepositoryProvider;

  private Provider<AdsRepository> adsRepositoryProvider;

  private Provider<ChatRepository> chatRepositoryProvider;

  private DaggerIApplicationComponent(ConnectionModule connectionModuleParam,
      LiveData liveDataParam) {

    initialize(connectionModuleParam, liveDataParam);
  }

  public static IApplicationComponent.Builder builder() {
    return new Builder();
  }

  public static IApplicationComponent create() {
    return new Builder().build();
  }

  private HomeViewModel getHomeViewModel() {
    return injectHomeViewModel(HomeViewModel_Factory.newInstance(homeRepositoryProvider.get()));}

  private SplashViewModel getSplashViewModel() {
    return injectSplashViewModel(SplashViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private LoginViewModel getLoginViewModel() {
    return injectLoginViewModel(LoginViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private ForgetPasswordViewModel getForgetPasswordViewModel() {
    return injectForgetPasswordViewModel(ForgetPasswordViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private ConfirmViewModel getConfirmViewModel() {
    return injectConfirmViewModel(ConfirmViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private ChangePasswordViewModel getChangePasswordViewModel() {
    return injectChangePasswordViewModel(ChangePasswordViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private RegisterViewModel getRegisterViewModel() {
    return injectRegisterViewModel(RegisterViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private MyAccountViewModel getMyAccountViewModel() {
    return injectMyAccountViewModel(MyAccountViewModel_Factory.newInstance(settingsRepositoryProvider.get()));}

  private ProfileViewModel getProfileViewModel() {
    return injectProfileViewModel(ProfileViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private SettingsViewModel getSettingsViewModel() {
    return injectSettingsViewModel(SettingsViewModel_Factory.newInstance(settingsRepositoryProvider.get()));}

  private AdsViewModel getAdsViewModel() {
    return injectAdsViewModel(AdsViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private CategoriesViewModel getCategoriesViewModel() {
    return injectCategoriesViewModel(CategoriesViewModel_Factory.newInstance(settingsRepositoryProvider.get()));}

  private AddVillaHouseViewModel getAddVillaHouseViewModel() {
    return injectAddVillaHouseViewModel(AddVillaHouseViewModel_Factory.newInstance(adsRepositoryProvider.get()));}

  private AttachmentsViewModel getAttachmentsViewModel() {
    return injectAttachmentsViewModel(AttachmentsViewModel_Factory.newInstance(adsRepositoryProvider.get()));}

  private ConversationsViewModel getConversationsViewModel() {
    return injectConversationsViewModel(ConversationsViewModel_Factory.newInstance(chatRepositoryProvider.get()));}

  private MyAdsViewModel getMyAdsViewModel() {
    return injectMyAdsViewModel(MyAdsViewModel_Factory.newInstance(adsRepositoryProvider.get()));}

  private PaymentViewModel getPaymentViewModel() {
    return injectPaymentViewModel(PaymentViewModel_Factory.newInstance(authRepositoryProvider.get()));}

  private MyFavoritesViewModel getMyFavoritesViewModel() {
    return injectMyFavoritesViewModel(MyFavoritesViewModel_Factory.newInstance(adsRepositoryProvider.get()));}

  private AdDetailsViewModel getAdDetailsViewModel() {
    return injectAdDetailsViewModel(AdDetailsViewModel_Factory.newInstance(adsRepositoryProvider.get()));}

  @SuppressWarnings("unchecked")
  private void initialize(final ConnectionModule connectionModuleParam,
      final LiveData liveDataParam) {
    this.getMutableLiveDataProvider = DoubleCheck.provider(LiveData_GetMutableLiveDataFactory.create(liveDataParam));
    this.webServiceProvider = DoubleCheck.provider(ConnectionModule_WebServiceFactory.create(connectionModuleParam));
    this.connectionHelperProvider = DoubleCheck.provider(ConnectionHelper_Factory.create(webServiceProvider, webServiceProvider));
    this.homeRepositoryProvider = DoubleCheck.provider(HomeRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.authRepositoryProvider = DoubleCheck.provider(AuthRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.settingsRepositoryProvider = DoubleCheck.provider(SettingsRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.adsRepositoryProvider = DoubleCheck.provider(AdsRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
    this.chatRepositoryProvider = DoubleCheck.provider(ChatRepository_Factory.create(connectionHelperProvider, connectionHelperProvider));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);}

  @Override
  public void inject(BaseActivity tmpActivity) {
  }

  @Override
  public void inject(SplashFragment splashFragment) {
    injectSplashFragment(splashFragment);}

  @Override
  public void inject(OnBoardFragment onBoardFragment) {
    injectOnBoardFragment(onBoardFragment);}

  @Override
  public void inject(LoginFragment loginFragment) {
    injectLoginFragment(loginFragment);}

  @Override
  public void inject(ForgetPasswordFragment forgetPasswordFragment) {
    injectForgetPasswordFragment(forgetPasswordFragment);}

  @Override
  public void inject(ConfirmCodeFragment confirmCodeFragment) {
    injectConfirmCodeFragment(confirmCodeFragment);}

  @Override
  public void inject(ChangePasswordFragment changePasswordFragment) {
    injectChangePasswordFragment(changePasswordFragment);}

  @Override
  public void inject(RegisterFragment registerFragment) {
    injectRegisterFragment(registerFragment);}

  @Override
  public void inject(HomeFragment homeFragment) {
    injectHomeFragment(homeFragment);}

  @Override
  public void inject(NotificationsFragment notificationsFragment) {
  }

  @Override
  public void inject(MyAccountFragment myAccountFragment) {
    injectMyAccountFragment(myAccountFragment);}

  @Override
  public void inject(ProfileFragment profileFragment) {
    injectProfileFragment(profileFragment);}

  @Override
  public void inject(AboutAppFragment aboutAppFragment) {
    injectAboutAppFragment(aboutAppFragment);}

  @Override
  public void inject(ContactUsFragment contactUsFragment) {
    injectContactUsFragment(contactUsFragment);}

  @Override
  public void inject(TermsFragment termsFragment) {
    injectTermsFragment(termsFragment);}

  @Override
  public void inject(ChatFragment chatFragment) {
  }

  @Override
  public void inject(AdsInfoFragment adsInfoFragment) {
    injectAdsInfoFragment(adsInfoFragment);}

  @Override
  public void inject(AdvertisingFeeFragment advertisingFeeFragment) {
    injectAdvertisingFeeFragment(advertisingFeeFragment);}

  @Override
  public void inject(CategoriesFragment categoriesFragment) {
    injectCategoriesFragment(categoriesFragment);}

  @Override
  public void inject(AkarLocationsCitiesFragment akarLocationsCitiesFragment) {
    injectAkarLocationsCitiesFragment(akarLocationsCitiesFragment);}

  @Override
  public void inject(AkarLocationsMapFragment akarLocationsMapFragment) {
    injectAkarLocationsMapFragment(akarLocationsMapFragment);}

  @Override
  public void inject(AddVillaHouseManagmentFormFragment addVillaFormFragment) {
    injectAddVillaHouseManagmentFormFragment(addVillaFormFragment);}

  @Override
  public void inject(AddFlatFormFragment addFlatFormFragment) {
    injectAddFlatFormFragment(addFlatFormFragment);}

  @Override
  public void inject(AddWareHosueFormFragment addWareHouseFormFragment) {
    injectAddWareHosueFormFragment(addWareHouseFormFragment);}

  @Override
  public void inject(AddStoreFormFragment addStoreFormFragment) {
    injectAddStoreFormFragment(addStoreFormFragment);}

  @Override
  public void inject(AddLandFormFragment addLandFormFragment) {
    injectAddLandFormFragment(addLandFormFragment);}

  @Override
  public void inject(AddFactoryFormFragment addFactoryFormFragment) {
    injectAddFactoryFormFragment(addFactoryFormFragment);}

  @Override
  public void inject(AddResetFormFragment addResetFormFragment) {
    injectAddResetFormFragment(addResetFormFragment);}

  @Override
  public void inject(AddOfficeFormFragment addOfficeFormFragment) {
    injectAddOfficeFormFragment(addOfficeFormFragment);}

  @Override
  public void inject(AdsAttachmentsFragment adsAttachmentsFragment) {
    injectAdsAttachmentsFragment(adsAttachmentsFragment);}

  @Override
  public void inject(AdUploadingSuccessFragment adUploadingSuccessFragment) {
    injectAdUploadingSuccessFragment(adUploadingSuccessFragment);}

  @Override
  public void inject(ConversationsFragment conversationsFragment) {
    injectConversationsFragment(conversationsFragment);}

  @Override
  public void inject(CurrentAdsFragment currentAdsFragment) {
    injectCurrentAdsFragment(currentAdsFragment);}

  @Override
  public void inject(PreviousAdsFragment previousAdsFragment) {
    injectPreviousAdsFragment(previousAdsFragment);}

  @Override
  public void inject(MyAdsMainFragment myAdsMainFragment) {
    injectMyAdsMainFragment(myAdsMainFragment);}

  @Override
  public void inject(PaymentFragment paymentFragment) {
    injectPaymentFragment(paymentFragment);}

  @Override
  public void inject(HomeCitiesFragment homeCitiesFragment) {
    injectHomeCitiesFragment(homeCitiesFragment);}

  @Override
  public void inject(MyFavoritesMainFragment myFavoritesMainFragment) {
    injectMyFavoritesMainFragment(myFavoritesMainFragment);}

  @Override
  public void inject(FavoritesFragment favoritesFragment) {
    injectFavoritesFragment(favoritesFragment);}

  @Override
  public void inject(FavoritesContactFragment favoritesContactFragment) {
    injectFavoritesContactFragment(favoritesContactFragment);}

  @Override
  public void inject(AdDetailsFragment adDetailsFragment) {
    injectAdDetailsFragment(adDetailsFragment);}

  private HomeViewModel injectHomeViewModel(HomeViewModel instance) {
    HomeViewModel_MembersInjector.injectHomeRepository(instance, homeRepositoryProvider.get());
    return instance;
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    MainActivity_MembersInjector.injectLiveData(instance, getMutableLiveDataProvider.get());
    MainActivity_MembersInjector.injectViewModel(instance, getHomeViewModel());
    return instance;
  }

  private SplashViewModel injectSplashViewModel(SplashViewModel instance) {
    SplashViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private SplashFragment injectSplashFragment(SplashFragment instance) {
    SplashFragment_MembersInjector.injectViewModel(instance, getSplashViewModel());
    return instance;
  }

  private OnBoardFragment injectOnBoardFragment(OnBoardFragment instance) {
    OnBoardFragment_MembersInjector.injectViewModel(instance, getSplashViewModel());
    return instance;
  }

  private LoginViewModel injectLoginViewModel(LoginViewModel instance) {
    LoginViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private LoginFragment injectLoginFragment(LoginFragment instance) {
    LoginFragment_MembersInjector.injectViewModel(instance, getLoginViewModel());
    return instance;
  }

  private ForgetPasswordViewModel injectForgetPasswordViewModel(ForgetPasswordViewModel instance) {
    ForgetPasswordViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ForgetPasswordFragment injectForgetPasswordFragment(ForgetPasswordFragment instance) {
    ForgetPasswordFragment_MembersInjector.injectViewModel(instance, getForgetPasswordViewModel());
    return instance;
  }

  private ConfirmViewModel injectConfirmViewModel(ConfirmViewModel instance) {
    ConfirmViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ConfirmCodeFragment injectConfirmCodeFragment(ConfirmCodeFragment instance) {
    ConfirmCodeFragment_MembersInjector.injectViewModel(instance, getConfirmViewModel());
    return instance;
  }

  private ChangePasswordViewModel injectChangePasswordViewModel(ChangePasswordViewModel instance) {
    ChangePasswordViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ChangePasswordFragment injectChangePasswordFragment(ChangePasswordFragment instance) {
    ChangePasswordFragment_MembersInjector.injectViewModel(instance, getChangePasswordViewModel());
    return instance;
  }

  private RegisterViewModel injectRegisterViewModel(RegisterViewModel instance) {
    RegisterViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private RegisterFragment injectRegisterFragment(RegisterFragment instance) {
    RegisterFragment_MembersInjector.injectViewModel(instance, getRegisterViewModel());
    return instance;
  }

  private HomeFragment injectHomeFragment(HomeFragment instance) {
    HomeFragment_MembersInjector.injectViewModel(instance, getHomeViewModel());
    return instance;
  }

  private MyAccountViewModel injectMyAccountViewModel(MyAccountViewModel instance) {
    MyAccountViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private MyAccountFragment injectMyAccountFragment(MyAccountFragment instance) {
    MyAccountFragment_MembersInjector.injectViewModel(instance, getMyAccountViewModel());
    return instance;
  }

  private ProfileViewModel injectProfileViewModel(ProfileViewModel instance) {
    ProfileViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private ProfileFragment injectProfileFragment(ProfileFragment instance) {
    ProfileFragment_MembersInjector.injectViewModel(instance, getProfileViewModel());
    return instance;
  }

  private SettingsViewModel injectSettingsViewModel(SettingsViewModel instance) {
    SettingsViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private AboutAppFragment injectAboutAppFragment(AboutAppFragment instance) {
    AboutAppFragment_MembersInjector.injectViewModel(instance, getSettingsViewModel());
    return instance;
  }

  private ContactUsFragment injectContactUsFragment(ContactUsFragment instance) {
    ContactUsFragment_MembersInjector.injectViewModel(instance, getSettingsViewModel());
    return instance;
  }

  private TermsFragment injectTermsFragment(TermsFragment instance) {
    TermsFragment_MembersInjector.injectViewModel(instance, getSettingsViewModel());
    return instance;
  }

  private AdsViewModel injectAdsViewModel(AdsViewModel instance) {
    AdsViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private AdsInfoFragment injectAdsInfoFragment(AdsInfoFragment instance) {
    AdsInfoFragment_MembersInjector.injectViewModel(instance, getAdsViewModel());
    return instance;
  }

  private AdvertisingFeeFragment injectAdvertisingFeeFragment(AdvertisingFeeFragment instance) {
    AdvertisingFeeFragment_MembersInjector.injectViewModel(instance, getAdsViewModel());
    return instance;
  }

  private CategoriesViewModel injectCategoriesViewModel(CategoriesViewModel instance) {
    CategoriesViewModel_MembersInjector.injectRepository(instance, settingsRepositoryProvider.get());
    return instance;
  }

  private CategoriesFragment injectCategoriesFragment(CategoriesFragment instance) {
    CategoriesFragment_MembersInjector.injectViewModel(instance, getCategoriesViewModel());
    return instance;
  }

  private AkarLocationsCitiesFragment injectAkarLocationsCitiesFragment(
      AkarLocationsCitiesFragment instance) {
    AkarLocationsCitiesFragment_MembersInjector.injectViewModel(instance, getAdsViewModel());
    return instance;
  }

  private AkarLocationsMapFragment injectAkarLocationsMapFragment(
      AkarLocationsMapFragment instance) {
    AkarLocationsMapFragment_MembersInjector.injectViewModel(instance, getAdsViewModel());
    return instance;
  }

  private AddVillaHouseViewModel injectAddVillaHouseViewModel(AddVillaHouseViewModel instance) {
    AddVillaHouseViewModel_MembersInjector.injectRepository(instance, adsRepositoryProvider.get());
    return instance;
  }

  private AddVillaHouseManagmentFormFragment injectAddVillaHouseManagmentFormFragment(
      AddVillaHouseManagmentFormFragment instance) {
    AddVillaHouseManagmentFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddFlatFormFragment injectAddFlatFormFragment(AddFlatFormFragment instance) {
    AddFlatFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddWareHosueFormFragment injectAddWareHosueFormFragment(
      AddWareHosueFormFragment instance) {
    AddWareHosueFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddStoreFormFragment injectAddStoreFormFragment(AddStoreFormFragment instance) {
    AddStoreFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddLandFormFragment injectAddLandFormFragment(AddLandFormFragment instance) {
    AddLandFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddFactoryFormFragment injectAddFactoryFormFragment(AddFactoryFormFragment instance) {
    AddFactoryFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddResetFormFragment injectAddResetFormFragment(AddResetFormFragment instance) {
    AddResetFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AddOfficeFormFragment injectAddOfficeFormFragment(AddOfficeFormFragment instance) {
    AddOfficeFormFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private AttachmentsViewModel injectAttachmentsViewModel(AttachmentsViewModel instance) {
    AttachmentsViewModel_MembersInjector.injectRepository(instance, adsRepositoryProvider.get());
    return instance;
  }

  private AdsAttachmentsFragment injectAdsAttachmentsFragment(AdsAttachmentsFragment instance) {
    AdsAttachmentsFragment_MembersInjector.injectViewModel(instance, getAttachmentsViewModel());
    return instance;
  }

  private AdUploadingSuccessFragment injectAdUploadingSuccessFragment(
      AdUploadingSuccessFragment instance) {
    AdUploadingSuccessFragment_MembersInjector.injectViewModel(instance, getAddVillaHouseViewModel());
    return instance;
  }

  private ConversationsViewModel injectConversationsViewModel(ConversationsViewModel instance) {
    ConversationsViewModel_MembersInjector.injectRepository(instance, chatRepositoryProvider.get());
    return instance;
  }

  private ConversationsFragment injectConversationsFragment(ConversationsFragment instance) {
    ConversationsFragment_MembersInjector.injectViewModel(instance, getConversationsViewModel());
    return instance;
  }

  private MyAdsViewModel injectMyAdsViewModel(MyAdsViewModel instance) {
    MyAdsViewModel_MembersInjector.injectAdsRepository(instance, adsRepositoryProvider.get());
    return instance;
  }

  private CurrentAdsFragment injectCurrentAdsFragment(CurrentAdsFragment instance) {
    CurrentAdsFragment_MembersInjector.injectViewModel(instance, getMyAdsViewModel());
    return instance;
  }

  private PreviousAdsFragment injectPreviousAdsFragment(PreviousAdsFragment instance) {
    PreviousAdsFragment_MembersInjector.injectViewModel(instance, getMyAdsViewModel());
    return instance;
  }

  private MyAdsMainFragment injectMyAdsMainFragment(MyAdsMainFragment instance) {
    MyAdsMainFragment_MembersInjector.injectViewModel(instance, getMyAdsViewModel());
    return instance;
  }

  private PaymentViewModel injectPaymentViewModel(PaymentViewModel instance) {
    PaymentViewModel_MembersInjector.injectRepository(instance, authRepositoryProvider.get());
    return instance;
  }

  private PaymentFragment injectPaymentFragment(PaymentFragment instance) {
    PaymentFragment_MembersInjector.injectViewModel(instance, getPaymentViewModel());
    return instance;
  }

  private HomeCitiesFragment injectHomeCitiesFragment(HomeCitiesFragment instance) {
    HomeCitiesFragment_MembersInjector.injectViewModel(instance, getAdsViewModel());
    return instance;
  }

  private MyFavoritesViewModel injectMyFavoritesViewModel(MyFavoritesViewModel instance) {
    MyFavoritesViewModel_MembersInjector.injectAdsRepository(instance, adsRepositoryProvider.get());
    return instance;
  }

  private MyFavoritesMainFragment injectMyFavoritesMainFragment(MyFavoritesMainFragment instance) {
    MyFavoritesMainFragment_MembersInjector.injectViewModel(instance, getMyFavoritesViewModel());
    return instance;
  }

  private FavoritesFragment injectFavoritesFragment(FavoritesFragment instance) {
    FavoritesFragment_MembersInjector.injectViewModel(instance, getMyFavoritesViewModel());
    return instance;
  }

  private FavoritesContactFragment injectFavoritesContactFragment(
      FavoritesContactFragment instance) {
    FavoritesContactFragment_MembersInjector.injectViewModel(instance, getMyFavoritesViewModel());
    return instance;
  }

  private AdDetailsViewModel injectAdDetailsViewModel(AdDetailsViewModel instance) {
    AdDetailsViewModel_MembersInjector.injectAdsRepository(instance, adsRepositoryProvider.get());
    return instance;
  }

  private AdDetailsFragment injectAdDetailsFragment(AdDetailsFragment instance) {
    AdDetailsFragment_MembersInjector.injectViewModel(instance, getAdDetailsViewModel());
    return instance;
  }

  private static final class Builder implements IApplicationComponent.Builder {
    @Override
    public IApplicationComponent build() {
      return new DaggerIApplicationComponent(new ConnectionModule(), new LiveData());
    }
  }
}
